
-- *******************Prozedur PRODUKTIONSAUFTRAGV1 

create or replace PROCEDURE PRODUKTIONSAUFTRAGV1 (anr varchar2, menge number) AS 
newPa integer:= 0;
BEGIN
  select nvl(max(pa_nr) + 1, 0) into newPa from produktionsauftrag;
  insert into produktionsauftrag values(newPa, anr, menge);
  bestellen(anr, menge, newPa);
  commit;
END PRODUKTIONSAUFTRAGV1;













-- *******************Prozedur bestellen

create or replace procedure bestellen (anr varchar2, bmenge number, bpanr number) as
err varchar2(100) := '';
Procedure ermittle_einzelteile( anr  varchar2, emenge number, panr number) ; --Prototyp

Procedure ermittle_einzelteile( anr varchar2, emenge number, panr number) as  -- Implementierung
Cursor c1 is select * from struktur where o_a_nr = anr;
Flag Integer := 0;
menge_neu Integer := emenge;
rowFound integer := 0;
errormsg06 VARCHAR2(100) := '';
Begin
	Flag := 0;
  select count(*) into rowFound from et_liste where pa_nr = panr and et_nr = anr;
	For c1_rec in C1 loop
		Flag := 1;
		menge_neu := c1_rec.menge * emenge;
		Ermittle_einzelteile(c1_rec.u_a_nr, menge_neu, panr);
	End loop;
	If flag = 0 then 
	-- Insert into lieferliste  oder  update lieferliste …..

      DBMS_OUTPUT.PUT_LINE('anr: ' || anr);
      if rowFound <> 0 then
        update et_liste set et_menge = et_menge + emenge where pa_nr = panr and et_nr = anr;
      else
        insert into ET_Liste values (panr, anr, emenge);
      end if;
      --Exception
      --when others then
      --update ET_Liste set Et_menge = et_menge + emenge where et_nr = anr ;
	End if;
End;

Begin
	-- hier neuen Augtrag einfügen
	Ermittle_einzelteile(anr, bmenge, bpanr);
	commit;
Exception
	When others then
		-- Meldung
		Rollback;
    err := substr(SQLERRM, 1, 100);
    DBMS_OUTPUT.PUT_LINE('Fehler...' || err);
    insert into log_tab_06 values(err);
End;














-- *******************Trigger T_BESTELLLEN_V1


create or replace TRIGGER T_BESTELLLEN_V1
BEFORE INSERT ON ET_LISTE
FOR EACH ROW 
declare menge NUMBER := 0;
mindestmenge number := 0;
found NUMBER :=0;
rowFound NUMBER := 0;
BEGIN
    select count(*) into rowFound from nachbestellListe where pa_nr = :new.pa_nr and a_nr = :new.et_nr;
    select count(*) into found from lager where :new.et_nr = lager.a_nr;
    if found = 0 then
      raise_application_error(-20010,  'PA ' || :new.pa_nr || ': ' || :new.et_nr || ' nicht vorhanden!'); 
    end if;
    select lagermenge,mindestlagermenge into menge,mindestmenge from lager where A_NR = :new.ET_nr;
  if(menge - :new.ET_Menge < 0) then 
      raise_application_error(-20010, 'PA ' || :new.pa_nr || ': ' || :new.et_nr || ' ' || menge ||' Stück vorhanden, ' || :new.ET_Menge || ' notwendig'); 
  end if;
  if(menge - :new.ET_Menge < mindestmenge)then
      DBMS_OUTPUT.PUT_LINE('Artikel: ' || :new.et_nr || ' nachbestellt!' || ' rowfound: ' ||rowFound);
      if rowFound > 0 then
        update nachbestellListe set et_menge = :new.et_menge + 10 where pa_nr = :new.pa_nr and a_nr = :new.et_nr;
      else
        insert into nachbestellListe values (:new.pa_nr, :new.et_nr, 10);
      end if;
      
      update lager set lagermenge = lagermenge + NACHBESTELLMENGE where a_nr = :new.et_nr;
  end if;
  update lager set lagermenge = lagermenge - :new.et_menge where A_NR = :new.et_nr;
END;










-- *******************Create Tables

drop table struktur cascade constraints;
drop table lager cascade constraints;
drop table artikel cascade constraints;
drop table et_liste cascade constraints;
drop table produktionsauftrag cascade constraints;
drop table nachbestellListe;
drop table log_tab_06;

create table artikel (
		a_nr varchar2(4) primary key,
		bezeichnung varchar2(30),
		preis number);

create table lager (
		a_nr varchar2(4) primary key,
		lagermenge number(5),
		mindestlagermenge number(5),
		nachbestellmenge number(5),
		maximallagermenge number(5),
		foreign key (a_nr) references artikel(a_nr));


create table struktur (
		o_a_nr varchar2(4),
		u_a_nr varchar2(4),
		menge number(5),
		primary key(o_a_nr, u_a_nr),
		foreign key(o_a_nr) references artikel(a_nr),
		foreign key(u_a_nr) references artikel(a_nr));

create table produktionsauftrag(
		pa_nr integer primary key,
		a_nr varchar2(4) references artikel(a_nr),
		pa_menge number);

create table et_liste(
		pa_nr integer,
		et_nr varchar2(4),
		et_menge number,
		primary key(pa_nr,et_nr),
		foreign key(pa_nr) references produktionsauftrag(pa_nr),
		foreign key(et_nr) references artikel(a_nr)
		);
				


create table nachbestellListe(
  PA_NR INTEGER,
  A_NR VARCHAR(20),
  et_menge INTEGER
);


create table log_tab_06(
  log_txt_06 VARCHAR2(100)
);


				
				
-- Einzelartikel
insert into artikel VALUES('E100', 'EPROM',100);
insert into artikel VALUES('E101', 'PROM',80);
insert into artikel VALUES('E102', 'EEPROM',150);
insert into artikel VALUES('E103', 'DDRAM',200);
insert into artikel VALUES('E104', 'SDRAM',200);
insert into artikel VALUES('E105', 'Prozessor',700);
insert into artikel VALUES('E200', 'Sockel',50);
insert into artikel VALUES('E300', 'Platine',500);

-- Bauartikel
insert into artikel VALUES('B100', 'Board_A',1000);
insert into artikel VALUES('B200', 'GrafikBoard',500);
insert into artikel VALUES('B300', 'SCSI-Board',1000);
insert into artikel VALUES('B400', 'Allwetter-Board',800);
insert into artikel VALUES('P100', 'Traktionskontrolle',3000);

-- Endprodukt
insert into artikel VALUES('P200', 'Wegfahrhilfe',4000);
insert into artikel VALUES('P300', 'ESP',5000);
					   
					   
-- Struktur
insert into Struktur Values('B100','B300',1);
insert into Struktur Values('B100','B400',1);
insert into Struktur Values('B200','E100',4);
insert into Struktur Values('B200','E102',2);
insert into Struktur Values('B200','E104',6);
insert into Struktur Values('B200','E300',1);
insert into Struktur Values('B300','E300',1);
insert into Struktur Values('B300','E200',1);
insert into Struktur Values('B300','E105',1);
insert into Struktur Values('B300','E104',6);
insert into Struktur Values('B300','E100',3);
insert into Struktur Values('B400','E300',1);
insert into Struktur Values('B400','E102',4);
insert into Struktur Values('P100','B100',2);
insert into Struktur Values('P100','E101',4);
insert into Struktur Values('P100','E102',2);
insert into Struktur Values('P200','B300',4);
insert into Struktur Values('P200','E105',1);
insert into Struktur Values('P300','B300',1);
insert into Struktur Values('P300','B200',1);



-- Lager
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E100', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E101', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E102', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E103', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E104', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E105', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E200', 10,5,10);
insert into Lager (a_nr, lagermenge,mindestlagermenge, nachbestellmenge) values ('E300', 10,5,10);
commit;









-- *******************BSB Aufruf


DECLARE
  ANR VARCHAR2(200);
  MENGE NUMBER;
BEGIN
  ANR := 'B200';
  MENGE := 20;

  PRODUKTIONSAUFTRAGV1(
    ANR => ANR,
    MENGE => MENGE
  );
--rollback; 
END;






-- *******************Ausgabe
-- *********ETListeTabelle
0	E100	80
0	E102	40
0	E104	120
0	E300	20
--********ProduktionsauftragTabelle
0	B200	20





