/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Data.Car;
import Data.Database;
import Data.Driver;
import Data.Log;
import Data.SalaryEntry;
import Misc.CellRendererJourneys;
import Misc.DriverTableModel;
import Misc.EventCellException;
import Misc.LogbookTableModel;
import Misc.SalaryTableModel;
import java.util.Random;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;

/**
 *
 * @author schueler
 */
public class GUIMember extends javax.swing.JFrame implements DriverTableModel.OnExceptionTableModelListener,LogbookTableModel.OnExceptionTableModelListener,SalaryTableModel.OnExceptionTableModelListener,ListSelectionListener{

    /**
     * Creates new form GUIMember
     */
    public GUIMember() {
        initComponents();
        this.dtm.addOnExceptionTableModelListener(this);
        this.ltm.addOnExceptionTableModelListener(this);
        this.stm.addOnExceptionTableModelListener(this);
        this.TableLogBook.setDefaultRenderer(Integer.class,new CellRendererJourneys());
        
        //this.ltm.addOnExceptionTableModelListener((LogbookTableModel.OnExceptionTableModelListener) this);
        db.addCar(new Car("opel Corsa"));
        db.addCar(new Car("Isetta"));
        db.addCar(new Car("Roh 80"));
        
        TableColumn tc = this.TableLogBook.getColumnModel().getColumn(1);
        cboxCars = new JComboBox<>(db.getColCars().toArray(new Car[0]));
        
        TableColumn tc1 = this.TableSalary.getColumnModel().getColumn(0);
        cboxSal = new JComboBox<>(SalaryEntry.getAllMonths().toArray(new String[0]));
        tc1.setCellEditor(new DefaultCellEditor(cboxSal));
        
        tc.setCellEditor(new DefaultCellEditor(cboxCars));
       
        this.TableDriver.getSelectionModel().addListSelectionListener(this);
        this.TableLogBook.getSelectionModel().addListSelectionListener(this);
        this.TableSalary.getSelectionModel().addListSelectionListener(this);

        this.db.addObserver(this.dtm);
        this.db.addObserver(this.ltm);
        this.db.addObserver(this.stm);
        //tc.setCellEditor(new DefaultCellEditor(cboxCars));
        
        this.toggle.setVisible(false);
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableDriver = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableLogBook = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        log_descr = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        driver_descr = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        Msglbl = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        sal_descr = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableSalary = new javax.swing.JTable();
        toggle = new javax.swing.JPanel();
        number_of_log = new javax.swing.JLabel();
        txt_numberofLogs = new javax.swing.JTextField();
        number_of_journeys = new javax.swing.JLabel();
        txt_numberofJourneys = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnFile = new javax.swing.JMenu();
        mntmLoad = new javax.swing.JMenuItem();
        mntmSave = new javax.swing.JMenuItem();
        mntmLoadXML = new javax.swing.JMenuItem();
        mntmSaveXML = new javax.swing.JMenuItem();
        mnDriver = new javax.swing.JMenu();
        mntmAddDriver = new javax.swing.JMenuItem();
        mntmDeleteDriver = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        mntm_addLog = new javax.swing.JMenuItem();
        mntm_deleteLog = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        mntm_AddSalary = new javax.swing.JMenuItem();
        mntm_deleteSalary = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        mntm_toggleinfo = new javax.swing.JMenuItem();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(254, 107, 95));

        TableDriver.setBackground(new java.awt.Color(253, 178, 178));
        TableDriver.setModel(dtm);
        TableDriver.setGridColor(new java.awt.Color(186, 65, 65));
        jScrollPane1.setViewportView(TableDriver);

        TableLogBook.setModel(ltm);
        jScrollPane2.setViewportView(TableLogBook);

        jLabel1.setToolTipText("");

        jPanel1.setBackground(new java.awt.Color(253, 217, 104));

        log_descr.setText("No driver selected");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(log_descr)
                .addContainerGap(475, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(log_descr)
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(253, 217, 104));

        driver_descr.setText("driver:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(driver_descr)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(driver_descr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(104, 193, 253));

        Msglbl.setBackground(new java.awt.Color(254, 95, 114));
        Msglbl.setForeground(new java.awt.Color(33, 33, 33));
        Msglbl.setText("...");
        Msglbl.setAutoscrolls(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Msglbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Msglbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        Msglbl.getAccessibleContext().setAccessibleName("Messagelbl");

        jPanel4.setBackground(new java.awt.Color(253, 217, 104));

        sal_descr.setText("No driver selected");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sal_descr)
                .addContainerGap(475, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(sal_descr)
                .addContainerGap())
        );

        TableSalary.setModel(stm);
        jScrollPane4.setViewportView(TableSalary);

        toggle.setBackground(new java.awt.Color(253, 174, 104));

        number_of_log.setText("number of Logs:");

        number_of_journeys.setText("number of journeys:");

        javax.swing.GroupLayout toggleLayout = new javax.swing.GroupLayout(toggle);
        toggle.setLayout(toggleLayout);
        toggleLayout.setHorizontalGroup(
            toggleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toggleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(toggleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(number_of_log)
                    .addComponent(number_of_journeys))
                .addGap(46, 46, 46)
                .addGroup(toggleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txt_numberofJourneys, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_numberofLogs, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        toggleLayout.setVerticalGroup(
            toggleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, toggleLayout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(toggleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(number_of_log)
                    .addComponent(txt_numberofLogs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(toggleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(number_of_journeys)
                    .addComponent(txt_numberofJourneys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        jMenuBar1.setBackground(new java.awt.Color(255, 0, 46));
        jMenuBar1.setForeground(new java.awt.Color(1, 1, 1));

        mnFile.setText("File");

        mntmLoad.setText("Load");
        mntmLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        mnFile.add(mntmLoad);
        mntmLoad.getAccessibleContext().setAccessibleName("mntmLoad");

        mntmSave.setText("Save");
        mntmSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        mnFile.add(mntmSave);
        mntmSave.getAccessibleContext().setAccessibleName("mntmSave");

        mntmLoadXML.setText("LoadXML");
        mntmLoadXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        mnFile.add(mntmLoadXML);
        mntmLoadXML.getAccessibleContext().setAccessibleName("mntmLoadXML");

        mntmSaveXML.setText("SaveXML");
        mntmSaveXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        mnFile.add(mntmSaveXML);
        mntmSaveXML.getAccessibleContext().setAccessibleName("mntmSaveXML");

        jMenuBar1.add(mnFile);

        mnDriver.setText("Driver");
        mnDriver.setToolTipText("");

        mntmAddDriver.setText("Add Driver");
        mntmAddDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        mnDriver.add(mntmAddDriver);
        mntmAddDriver.getAccessibleContext().setAccessibleName("mntmAddDriver");

        mntmDeleteDriver.setText("Delete Driver");
        mntmDeleteDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        mnDriver.add(mntmDeleteDriver);
        mntmDeleteDriver.getAccessibleContext().setAccessibleName("mntmDeleteDriver");

        jMenuBar1.add(mnDriver);

        jMenu1.setBackground(new java.awt.Color(227, 191, 49));
        jMenu1.setText("Logbook");
        jMenu1.setToolTipText("");

        mntm_addLog.setText("Add Log");
        mntm_addLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        jMenu1.add(mntm_addLog);

        mntm_deleteLog.setText("Delete Log");
        mntm_deleteLog.setToolTipText("");
        mntm_deleteLog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        jMenu1.add(mntm_deleteLog);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Salary");

        mntm_AddSalary.setText("Add Salary");
        mntm_AddSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        jMenu2.add(mntm_AddSalary);

        mntm_deleteSalary.setText("Delete Salary");
        mntm_deleteSalary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        jMenu2.add(mntm_deleteSalary);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Other");

        mntm_toggleinfo.setText("Toggle Info");
        mntm_toggleinfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mntmActionPerformed(evt);
            }
        });
        jMenu5.add(mntm_toggleinfo);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(toggle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 614, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(toggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mntmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mntmActionPerformed
        try{
            if(evt.getSource() == this.mntmAddDriver){
                //Add Driver
                this.AddDriver();
            }else if(evt.getSource() == this.mntmDeleteDriver){
                //Delete Driver
               this.DeleteDriver();
            }else if(evt.getSource() == this.mntmLoad){
                //Load
                this.LoadDB();
            }else if(evt.getSource() == this.mntmLoadXML){
                //Load XML
                this.LoadDBXML();
            }else if(evt.getSource() == this.mntmSave){
               //Save bin
               this.SaveDB();
            }else if(evt.getSource() == this.mntmSaveXML){
               //Save XML
               this.SaveDBXML();
            }else if (evt.getSource() == this.mntm_addLog){
                //add new Logbook entry
                this.AddLog();
            }else if (evt.getSource() == this.mntm_deleteLog ){
                //Delete Log from col
                this.DeleteLog();
            }else if(evt.getSource() == this.mntm_AddSalary){
                // Add SalaryEntry 
                this.AddSalaryEntry();
            }else if(evt.getSource() == this.mntm_deleteSalary){
                // Remove SalaryEntry 
                this.DeleteSalaryEntry();
            }else if(evt.getSource() == this.mntm_toggleinfo){
                //either show or hide Toggle info
                this.HandleToggle();
            }
        }catch(Exception ex){
            this.Msglbl.setText(ex.getMessage());
        }
    }//GEN-LAST:event_mntmActionPerformed

    
    //MY FUNCTIONS 
    private void AddDriver() throws Exception{
        Driver d = new Driver("test","2000-02-02","2000-02-02","2000-02-02");
        this.db.addDriver(d);
        this.Msglbl.setText("--> Driver added");
    }
    
    private void SaveDB(){
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Binary Files", "bin");
        chooser.addChoosableFileFilter(filter);
        if(chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                db.saveDB(chooser.getSelectedFile().getAbsolutePath());
                this.Msglbl.setText("data saved -> " + chooser.getSelectedFile().getAbsolutePath());
        }
    }
    
    private void LoadDB() throws Exception{
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Binary Files", "bin");
        chooser.addChoosableFileFilter(filter);
        if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {					
                db.LoadDB(chooser.getSelectedFile().getAbsolutePath());
                this.Msglbl.setText("data loaded <- " + chooser.getSelectedFile().getAbsolutePath());
            } catch (Exception ex) {
                throw new Exception("error at loading bin file: " + ex.getMessage());
            }
        }
    }
    
    private void SaveDBXML(){
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Binary Files", "xml");
        chooser.addChoosableFileFilter(filter);
        if(chooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            try {
                db.saveDBXML(chooser.getSelectedFile().getAbsolutePath());
                this.Msglbl.setText("data saved -> " + chooser.getSelectedFile().getAbsolutePath());
            } catch (Exception ex) {
                this.Msglbl.setText("error -> " + ex.getMessage()    );  
            }
            
        }
    }
    
    private void LoadDBXML() throws Exception{
        JFileChooser chooser = new JFileChooser();
       FileFilter filter = new FileNameExtensionFilter("Binary Files", "bin");
       chooser.addChoosableFileFilter(filter);
       if(chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
           try {					
               db.loadDBXML(chooser.getSelectedFile().getAbsolutePath());
               this.Msglbl.setText("data loaded -> " + chooser.getSelectedFile().getAbsolutePath());
           } catch (Exception ex) {
               throw new Exception("error at loading xml file: " + ex.getMessage());
           }
       }
    }
    
    private void DeleteDriver() throws Exception{
        Driver driver = this.dtm.getDriverAtRow(this.TableDriver.getSelectedRow());
        
        try{
            this.db.DeleteDriver(driver);
        }catch(Exception ex){
            throw new Exception("driver not in col: " + ex.getMessage());
        }
        this.Msglbl.setText("--> Driver "+ driver.getName() +" deleted");          
    }
    
    private void AddLog() throws Exception{

        if(this.TableDriver.getSelectedRow() == -1)
                throw new Exception("there is no Driver Selected!");
        
        Driver driver = this.dtm.getDriverAtRow(this.TableDriver.getSelectedRow());
        this.db.setSelectedDriver(driver);
        try{
            Random generator = new Random(); 
            int i = generator.nextInt(9) + 1;
            if(driver == null)
                throw new Exception("selected driver not valid");
            driver.addLog(new Log("2012-02-0" + i,21, (Car) this.db.getColCars().toArray()[1]));
            this.Msglbl.setText("--> Log added");
                try{
                    this.txt_numberofLogs.setText("" + driver.getNumberOfLogBooks());
                    this.txt_numberofJourneys.setText("" + driver.getTotalNumberOfJourneys());
                }catch(Exception Ex2){
                    this.Msglbl.setText("An error occured : " + Ex2.getMessage());
                }
            
        }catch(Exception Ex){
            throw new Exception("Log cant be added :" + Ex.getMessage());
        }

    }
    
    private void DeleteLog() throws Exception{
        Driver driver = this.dtm.getDriverAtRow(this.TableDriver.getSelectedRow());
        Log log;
        try{
            log = driver.getLogWithRowNumber(this.TableLogBook.getSelectedRow());
        }catch(Exception Ex){
            throw new Exception("Log does not exist");
        }
        try{
            driver.DeleteLog(log);
        }catch(Exception ex){
            throw new Exception("log not in col: " + ex.getMessage());
        }
        this.Msglbl.setText("--> Log deleted");     
    }
    
    private void AddSalaryEntry () throws Exception{
                if(this.TableDriver.getSelectedRow() == -1)
                throw new Exception("there is no Driver Selected!");
        
        try{
            if(this.db.getSelectedDriver() == null)
                throw new Exception("selected driver not valid");
            this.db.getSelectedDriver().addSalaryEntry(new SalaryEntry(-1,5));
            this.Msglbl.setText("--> Salary added");
            
        }catch(Exception Ex){
            throw new Exception("Salary cant be added :" + Ex.getMessage());
        }
    }
    
    private void DeleteSalaryEntry() throws Exception{
        Driver driver = this.dtm.getDriverAtRow(this.TableDriver.getSelectedRow());
        SalaryEntry sal;
        try{
            sal = driver.getSalWithRowNumber(this.TableSalary.getSelectedRow());
        }catch(Exception Ex){
            throw new Exception("sal does not exist");
        }
        try{
            driver.deleteSal(sal);
        }catch(Exception ex){
            throw new Exception("sal not in col: " + ex.getMessage());
        }
        this.Msglbl.setText("--> sal deleted");     
    }
    
    private void HandleToggle(){
        if(this.istoggleVisible == false){
            this.toggle.setVisible(true);
            this.istoggleVisible = true;
        }else {
            this.toggle.setVisible(false);
            this.istoggleVisible = false;
        }
    }
    
    
    
    
    private void DriverTableSelectedHandler(){
        Driver driver;
        try {
            driver = this.db.getDriverWithRowNumber(this.TableDriver.getSelectedRow());
            this.db.setSelectedDriver(driver);
            if(driver == null){
                this.log_descr.setText("no driver selected");
                this.sal_descr.setText("no driver selected");
            }else{
                this.log_descr.setText("selected driver : " + driver.getName());
                this.sal_descr.setText("selected driver : " + driver.getName());
             
            this.Msglbl.setText(driver.toString());
            
            }
            try{
                this.txt_numberofLogs.setText("" + driver.getNumberOfLogBooks());
                this.txt_numberofJourneys.setText("" + driver.getTotalNumberOfJourneys());
            }catch(Exception Ex2){
                this.Msglbl.setText("An error occured : " + Ex2.getMessage());
            }
            
        } catch (Exception ex) {
            this.Msglbl.setText("No driver selected: " + ex.getMessage());
            this.txt_numberofLogs.setText("");
            this.txt_numberofJourneys.setText("");

        } 
    }

    private void LogTableSelectedHandler(){
        Driver driver;
        Log log;
        try {
            driver = this.db.getDriverWithRowNumber(this.TableDriver.getSelectedRow());
            try{
                log = driver.getLogWithRowNumber(this.TableLogBook.getSelectedRow());
                this.Msglbl.setText(log.toString());
            }catch (Exception Ex){
                this.Msglbl.setText("No Log selected");
            }
        } catch (Exception ex) {
            this.Msglbl.setText("Error : " + ex.getMessage());
        } 
        
    }
    
    private void SalTableSelectedHandler(){
    Driver driver;
    SalaryEntry sal;
    try {
        driver = this.db.getDriverWithRowNumber(this.TableDriver.getSelectedRow());
        try{
            sal = driver.getSalWithRowNumber(this.TableSalary.getSelectedRow());
            this.Msglbl.setText(sal.toString());
        }catch (Exception Ex){
            this.Msglbl.setText("No sal selected");
        }
    } catch (Exception ex) {
        this.Msglbl.setText("Error : " + ex.getMessage());
    } 

    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Msglbl;
    private javax.swing.JTable TableDriver;
    private javax.swing.JTable TableLogBook;
    private javax.swing.JTable TableSalary;
    private javax.swing.JLabel driver_descr;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel log_descr;
    private javax.swing.JMenu mnDriver;
    private javax.swing.JMenu mnFile;
    private javax.swing.JMenuItem mntmAddDriver;
    private javax.swing.JMenuItem mntmDeleteDriver;
    private javax.swing.JMenuItem mntmLoad;
    private javax.swing.JMenuItem mntmLoadXML;
    private javax.swing.JMenuItem mntmSave;
    private javax.swing.JMenuItem mntmSaveXML;
    private javax.swing.JMenuItem mntm_AddSalary;
    private javax.swing.JMenuItem mntm_addLog;
    private javax.swing.JMenuItem mntm_deleteLog;
    private javax.swing.JMenuItem mntm_deleteSalary;
    private javax.swing.JMenuItem mntm_toggleinfo;
    private javax.swing.JLabel number_of_journeys;
    private javax.swing.JLabel number_of_log;
    private javax.swing.JLabel sal_descr;
    private javax.swing.JPanel toggle;
    private javax.swing.JTextField txt_numberofJourneys;
    private javax.swing.JTextField txt_numberofLogs;
    // End of variables declaration//GEN-END:variables

    private Database db = Database.getNewInstance();
    private final DriverTableModel dtm = new DriverTableModel(db);
    private LogbookTableModel ltm = new LogbookTableModel();
    private SalaryTableModel stm = new SalaryTableModel();
    JComboBox<Car> cboxCars;
    JComboBox<String> cboxSal;
    private boolean istoggleVisible = false;
   
    @Override
    public void valueChanged(ListSelectionEvent e) {
        if(e.getSource() == this.TableDriver.getSelectionModel()){
            //Driver Table has selection changed
            this.DriverTableSelectedHandler();
        }else if(e.getSource() == this.TableLogBook.getSelectionModel()){
            //Log Table has selection change
            this.LogTableSelectedHandler();
        }else if(e.getSource() == this.TableSalary.getSelectionModel()){
            //Sal Table has selection change
            this.SalTableSelectedHandler();
        }
    }

    @Override
    public void handleTableModelException(EventCellException event) {
       this.Msglbl.setText(event.getMessage());
    }
    
}
