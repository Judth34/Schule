/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkgGUI;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import pkgDATA.Database;
import pkgDATA.Driver;
import pkgDATA.DriverTableModle;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableColumn;
import pkgDATA.Car;
import pkgDATA.DriverNotExistsException;
import pkgDATA.EventCellException;
import pkgDATA.Logbook;
import pkgDATA.LogbookTableModle;
/**
 *
 * @author schueler
 */
public class goMobilGUI extends javax.swing.JFrame implements DriverTableModle.OnExceptionInTableModelListener, ListSelectionListener, LogbookTableModle.OnExceptionInTableModelListener{

    /**
     * Creates new form goMobilGUI
     */
    public goMobilGUI() {
        try {
            initComponents();
            this.dtm.addOnExceptionTableModelListener(this);
            this.ltm.addOnExceptionTableModelListener(this);
            this.jTableDrivers.getSelectionModel().addListSelectionListener(this);
            this.jTableLogbook.getSelectionModel().addListSelectionListener(this);
            this.db.addObserver(dtm);
            this.db.addObserver(ltm);
            this.db.addCar(new Car("695 Biposto, VL Fiat 2"));
            this.db.addCar(new Car("Multipla, VL Fiat 1"));
            TableColumn tc = this.jTableLogbook.getColumnModel().getColumn(1);
            JComboBox<Car> cboxCars = new JComboBox<>(db.getCars().toArray(new Car[0]));
            tc.setCellEditor(new DefaultCellEditor(cboxCars));
        } catch (Exception ex) {    
            Logger.getLogger(goMobilGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    Database db = Database.newInstance();
    DriverTableModle dtm = new DriverTableModle(db);
    LogbookTableModle ltm = new LogbookTableModle(db);
    journeyGUI journeyGUI;

    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jScrollPaneDriver = new javax.swing.JScrollPane();
        jTableDrivers = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblMessage = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableLogbook = new javax.swing.JTable();
        jMenuBar = new javax.swing.JMenuBar();
        jjMenuFile = new javax.swing.JMenu();
        jMenuItemLoad = new javax.swing.JMenuItem();
        jMenuItemSave = new javax.swing.JMenuItem();
        jMenuItemLoadXML = new javax.swing.JMenuItem();
        jMenuItemSaveXML = new javax.swing.JMenuItem();
        jMenuDriver = new javax.swing.JMenu();
        jMenuItemAddDriver = new javax.swing.JMenuItem();
        jMenuItemDeleteDriver = new javax.swing.JMenuItem();
        jMenuLogbook = new javax.swing.JMenu();
        jMenuItemAddLogbook = new javax.swing.JMenuItem();
        jMenuItemDeleteLogbook = new javax.swing.JMenuItem();
        jMenuOther = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItemGUIJourney = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableDrivers.setModel(dtm
        );
        jScrollPaneDriver.setViewportView(jTableDrivers);

        jPanel1.setBackground(new java.awt.Color(17, 206, 111));

        lblMessage.setBackground(java.awt.Color.red);
        lblMessage.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
        );

        jTableLogbook.setModel(ltm);
        jScrollPane1.setViewportView(jTableLogbook);

        jMenuBar.setBackground(new java.awt.Color(55, 59, 60));

        jjMenuFile.setText("File");

        jMenuItemLoad.setText("Load");
        jMenuItemLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jjMenuFile.add(jMenuItemLoad);

        jMenuItemSave.setText("Save");
        jMenuItemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jjMenuFile.add(jMenuItemSave);

        jMenuItemLoadXML.setText("Load XML");
        jMenuItemLoadXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jjMenuFile.add(jMenuItemLoadXML);

        jMenuItemSaveXML.setText("Save XML");
        jMenuItemSaveXML.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jjMenuFile.add(jMenuItemSaveXML);

        jMenuBar.add(jjMenuFile);

        jMenuDriver.setText("Driver");

        jMenuItemAddDriver.setText("Add Driver");
        jMenuItemAddDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jMenuDriver.add(jMenuItemAddDriver);

        jMenuItemDeleteDriver.setText("Delete Driver");
        jMenuItemDeleteDriver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jMenuDriver.add(jMenuItemDeleteDriver);

        jMenuBar.add(jMenuDriver);

        jMenuLogbook.setText("Logbook");

        jMenuItemAddLogbook.setText("add Logbook");
        jMenuItemAddLogbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jMenuLogbook.add(jMenuItemAddLogbook);

        jMenuItemDeleteLogbook.setText("delete Logbook");
        jMenuItemDeleteLogbook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jMenuLogbook.add(jMenuItemDeleteLogbook);

        jMenuBar.add(jMenuLogbook);

        jMenuOther.setText("Other");

        jMenuItem1.setText("Toggle Info");
        jMenuOther.add(jMenuItem1);

        jMenuItemGUIJourney.setText("GUI journey");
        jMenuItemGUIJourney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPerformed(evt);
            }
        });
        jMenuOther.add(jMenuItemGUIJourney);

        jMenuBar.add(jMenuOther);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 715, Short.MAX_VALUE)
                            .addComponent(jScrollPaneDriver))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPaneDriver, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionPerformed
        // TODO add your handling code here:
        try {
            if(evt.getSource() == this.jMenuItemAddDriver){
                addDriver();
            }else
                if(evt.getSource() == this.jMenuItemDeleteDriver){
                     deleteDriver();
                }else
                    if(evt.getSource() == this.jMenuItemSave){
                        saveDriver();
                    }else
                        if(evt.getSource() == this.jMenuItemLoad){
                            loadDriver();
                        }else
                            if(evt.getSource() == this.jMenuItemSaveXML){
                                saveXMLDriver();
                            }else
                                if(evt.getSource() == this.jMenuItemLoadXML){
                                    loadXMLDriver();
                                }else
                                    if(evt.getSource() == this.jMenuItemAddLogbook){
                                        addLogbook();
                                    }else
                                        if(evt.getSource() == this.jMenuItemDeleteLogbook){
                                            deleteLogbook();
                                        }else
                                            if(evt.getSource() == this.jMenuItemGUIJourney){
                                                showGUIJourney();
                                            }
                                    
        } catch (Exception ex) {
            lblMessage.setText(ex.getMessage());
            ex.printStackTrace();
        }
    }//GEN-LAST:event_ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    private void addDriver() throws Exception{
        db.addDriver(new Driver("No Name", "2017-01-01", "2017-01-01", "2017-01-01")); 
        lblMessage.setText("Driver added!");
    }
    
    private void deleteDriver() throws Exception{
        int row = this.jTableDrivers.getSelectedRow();
        Driver d = db.getDriverWithRowNumber(row);
        db.deleteDriver(d);
        lblMessage.setText("Driver: " + d.getName() + " deleted!");
    }
    
    private void addLogbook() {
        try{
            Driver d = db.getDriverWithRowNumber(this.jTableDrivers.getSelectedRow());
                d.addLogbook(new Logbook("2000-01-01", 20, db.getCars().first()));
                lblMessage.setText("Logbook added!");
            }catch(Exception ex){
                if(ex.getClass() == DriverNotExistsException.class)
                    lblMessage.setText("Please select a driver!");
                else
                    lblMessage.setText(ex.getMessage());
        }
    }
    
    private void deleteLogbook() throws Exception {
        try{
        Driver d = db.getSelectedDriver();
        Logbook l = d.getLogbookWithRowNumber(this.jTableLogbook.getSelectedRow());
        d.deleteLogbook(l);
        lblMessage.setText("Lockbook deleted!");
        }catch(Exception ex){
            lblMessage.setText("Please select a logbook!");
        }
    }
    
    private void saveDriver() throws Exception{
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Java & Pics", "gif", "png", 
                        "jpg", "java");
        chooser.addChoosableFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            db.saveDB(chooser.getSelectedFile().getAbsolutePath());
            this.lblMessage.setText("Saved in --> " + chooser.getSelectedFile().getAbsolutePath());
        }
        else
            lblMessage.setText("nothing chosen");
    }
    
    private void loadDriver() throws Exception{
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Java & Pics", "gif", "png", 
                        "jpg", "java");
        chooser.addChoosableFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            db.loadDB(chooser.getSelectedFile().getAbsolutePath());
            this.lblMessage.setText("Loaded from --> " + chooser.getSelectedFile().getAbsolutePath());
        }
        else
            lblMessage.setText("nothing chosen");
    
    }
    
    private void saveXMLDriver() throws Exception{
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Java & Pics", "gif", "png", 
                        "jpg", "java");
        chooser.addChoosableFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            db.saveDBXML(chooser.getSelectedFile().getAbsolutePath());
            this.lblMessage.setText("Saved in --> " + chooser.getSelectedFile().getAbsolutePath());
        }
        else
                lblMessage.setText("nothing chosen");    
    }
    
    private void loadXMLDriver() throws Exception{
        JFileChooser chooser = new JFileChooser();
        FileFilter filter = new FileNameExtensionFilter("Java & Pics", "gif", "png", 
                        "jpg", "java");
        chooser.addChoosableFileFilter(filter);
        int returnVal = chooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            db.loadDBXML(chooser.getSelectedFile().getAbsolutePath());
            this.lblMessage.setText("Loaded from --> " + chooser.getSelectedFile().getAbsolutePath());
        }
        else
            lblMessage.setText("nothing chosen");
        }
    
    private void showGUIJourney() {
        if(this.journeyGUI == null){
            if(this.db.getSelectedLogbook() == null)
                lblMessage.setText("Please select a logbook first!");
            else{
                this.journeyGUI = new journeyGUI(this.db);
                this.journeyGUI.setVisible(true);
                this.db.addObserver(journeyGUI);
            }
        }else
            lblMessage.setText("Your already have a GUI open!");
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuDriver;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemAddDriver;
    private javax.swing.JMenuItem jMenuItemAddLogbook;
    private javax.swing.JMenuItem jMenuItemDeleteDriver;
    private javax.swing.JMenuItem jMenuItemDeleteLogbook;
    private javax.swing.JMenuItem jMenuItemGUIJourney;
    private javax.swing.JMenuItem jMenuItemLoad;
    private javax.swing.JMenuItem jMenuItemLoadXML;
    private javax.swing.JMenuItem jMenuItemSave;
    private javax.swing.JMenuItem jMenuItemSaveXML;
    private javax.swing.JMenu jMenuLogbook;
    private javax.swing.JMenu jMenuOther;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneDriver;
    private javax.swing.JTable jTableDrivers;
    private javax.swing.JTable jTableLogbook;
    private javax.swing.JMenu jjMenuFile;
    private javax.swing.JLabel lblMessage;
    // End of variables declaration//GEN-END:variables

    @Override
    public void handleTableModelException(EventCellException event) {
        lblMessage.setText(event.getMessage());
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        try {
            Driver d = db.getDriverWithRowNumber(this.jTableDrivers.getSelectedRow());
            if(d != null){
                if(d.equals(db.getSelectedDriver())){
                    Logbook l = d.getLogbookWithRowNumber(this.jTableLogbook.getSelectedRow());
                    db.setSelectedLogbook(l);
                }else{
                    db.setSelectedDriver(d);
                    lblMessage.setText("Selected driver: " + d.toString());
                }
                
                
            }
        } catch (Exception ex) {
            lblMessage.setText(ex.getMessage());
            ex.printStackTrace();
        }
    }

    
}
